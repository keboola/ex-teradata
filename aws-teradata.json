{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "DBTemporalEnabled": {
      "Fn::Equals": [
        {
          "Ref": "DBTemporal"
        },
        "yes"
      ]
    },
    "DBUseElasticIPs": {
      "Fn::Equals": [
        {
          "Ref": "DBElasticIPs"
        },
        "yes"
      ]
    }
  },
  "Description": "MPP Teradata Database",
  "Mappings": {
    "DBAMIs": {
      "ap-northeast-1": {
        "AMI": "ami-4e4c1f28"
      },
      "ap-northeast-2": {
        "AMI": "ami-011fb36f"
      },
      "ap-south-1": {
        "AMI": "ami-49550e26"
      },
      "ap-southeast-1": {
        "AMI": "ami-1397cb6f"
      },
      "ap-southeast-2": {
        "AMI": "ami-b014d9d2"
      },
      "ca-central-1": {
        "AMI": "ami-23ed6b47"
      },
      "eu-central-1": {
        "AMI": "ami-a70e5d4c"
      },
      "eu-west-1": {
        "AMI": "ami-bbbdeac2"
      },
      "eu-west-2": {
        "AMI": "ami-b301e7d4"
      },
      "sa-east-1": {
        "AMI": "ami-e295c18e"
      },
      "us-east-1": {
        "AMI": "ami-f7d1008a"
      },
      "us-east-2": {
        "AMI": "ami-04360761"
      },
      "us-gov-west-1": {
        "AMI": ""
      },
      "us-west-1": {
        "AMI": "ami-0bafb86b"
      },
      "us-west-2": {
        "AMI": "ami-6a7de212"
      }
    },
    "DBInstanceStorageTypes": {
      "d2.xlarge---HDD-6TB": {
        "InstanceType": "d2.xlarge"
      },
      "i2.2xlarge--SSD-1.6TB": {
        "InstanceType": "i2.2xlarge"
      }
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Teradata Database"
          },
          "Parameters": [
            "DBSystemName",
            "DBSystemPassword",
            "DBKanjiSupport",
            "NTPServers",
            "Timezone",
            "DBTemporal",
            "DBSecureZones",
            "DBRowLevelSecurity"
          ]
        },
        {
          "Label": {
            "default": "Node Configuration"
          },
          "Parameters": [
            "DBNodeCount",
            "DBInstanceStorageType"
          ]
        },
        {
          "Label": {
            "default": "VPC/Network"
          },
          "Parameters": [
            "VPC",
            "PublicSubnet",
            "DBPlacementGroupParam",
            "DBElasticIPs"
          ]
        },
        {
          "Label": {
            "default": "Security Group"
          },
          "Parameters": [
            "SecurityGroupAccess"
          ]
        },
        {
          "Label": {
            "default": "Key Pair"
          },
          "Parameters": [
            "KeyName"
          ]
        }
      ],
      "ParameterLabels": {
        "DBElasticIPs": {
          "default": "Elastic IPs"
        },
        "DBInstanceStorageType": {
          "default": "Instance and Storage Type"
        },
        "DBKanjiSupport": {
          "default": "Japanese Support"
        },
        "DBNodeCount": {
          "default": "Number of Nodes"
        },
        "DBPlacementGroupParam": {
          "default": "Database Placement Group"
        },
        "DBRowLevelSecurity": {
          "default": "Enable Row-Level Security"
        },
        "DBSecureZones": {
          "default": "Enable Secure Zones"
        },
        "DBSystemName": {
          "default": "System Name"
        },
        "DBSystemPassword": {
          "default": "DBC Password"
        },
        "DBTemporal": {
          "default": "Enable Temporal"
        },
        "KeyName": {
          "default": "AWS Key Pair"
        },
        "NTPServers": {
          "default": "NTP Servers"
        },
        "PublicSubnet": {
          "default": "Database Subnet"
        },
        "SecurityGroupAccess": {
          "default": "Remote Access From"
        },
        "Timezone": {
          "default": "System Timezone"
        },
        "VPC": {
          "default": "VPC"
        }
      }
    }
  },
  "Parameters": {
    "DBElasticIPs": {
      "AllowedValues": [
        "no",
        "yes"
      ],
      "Default": "no",
      "Description": "Allocate an Elastic IP for each node. NOTE: These will not be deleted when the stack is removed.",
      "Type": "String"
    },
    "DBInstanceStorageType": {
      "AllowedValues": [
        "d2.xlarge---HDD-6TB",
        "i2.2xlarge--SSD-1.6TB"
      ],
      "Default": "i2.2xlarge--SSD-1.6TB",
      "Description": "Storage sizes are per node",
      "Type": "String"
    },
    "DBKanjiSupport": {
      "AllowedValues": [
        "no",
        "yes"
      ],
      "Default": "no",
      "Description": "Japanese language support",
      "Type": "String"
    },
    "DBNodeCount": {
      "Default": "2",
      "Description": "Database node count (1-2)",
      "MaxValue": 2,
      "MinValue": 1,
      "Type": "Number"
    },
    "DBPlacementGroupParam": {
      "Description": "Existing Placement Group name",
      "MinLength": "1",
      "Type": "String"
    },
    "DBRowLevelSecurity": {
      "AllowedValues": [
        "no",
        "yes"
      ],
      "Default": "no",
      "Description": "",
      "Type": "String"
    },
    "DBSecureZones": {
      "AllowedValues": [
        "no",
        "yes"
      ],
      "Default": "no",
      "Description": "",
      "Type": "String"
    },
    "DBSystemName": {
      "AllowedPattern": "[a-zA-Z0-9]+",
      "ConstraintDescription": "must only contain 1-15 alphanumeric characters",
      "Default": "mpp",
      "Description": "",
      "MaxLength": "15",
      "MinLength": "1",
      "Type": "String"
    },
    "DBSystemPassword": {
      "Description": "Database DBC Password",
      "MinLength": "1",
      "NoEcho": true,
      "Type": "String"
    },
    "DBTemporal": {
      "AllowedValues": [
        "no",
        "yes"
      ],
      "Default": "no",
      "Description": "When enabled, temporal data is stored in the Teradata file system and displayed in UTC time.\nIf using a time zone other than UTC or enabling daylight savings is required, \nthen Teradata Professional Services engagement will be required.",
      "Type": "String"
    },
    "KeyName": {
      "Description": "",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "NTPServers": {
      "Default": "169.254.169.123",
      "Description": "Comma-delimited Network Time Protocol (NTP) servers, default is to use the Amazon Time Sync Service local IP",
      "Type": "String"
    },
    "PublicSubnet": {
      "Description": "",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "SecurityGroupAccess": {
      "AllowedPattern": "\\d{1,3}([.]\\d{1,3}){3}/\\d{1,2}",
      "ConstraintDescription": "must be a CIDR block, e.g. 172.0.48.28/32",
      "Description": "CIDR block to lockdown SSH and database client access to the database nodes",
      "Type": "String"
    },
    "Timezone": {
      "AllowedValues": [
        "",
        "Africa/Abidjan",
        "Africa/Accra",
        "Africa/Addis_Ababa",
        "Africa/Algiers",
        "Africa/Asmara",
        "Africa/Asmera",
        "Africa/Bamako",
        "Africa/Bangui",
        "Africa/Banjul",
        "Africa/Bissau",
        "Africa/Blantyre",
        "Africa/Brazzaville",
        "Africa/Bujumbura",
        "Africa/Cairo",
        "Africa/Casablanca",
        "Africa/Ceuta",
        "Africa/Conakry",
        "Africa/Dakar",
        "Africa/Dar_es_Salaam",
        "Africa/Djibouti",
        "Africa/Douala",
        "Africa/El_Aaiun",
        "Africa/Freetown",
        "Africa/Gaborone",
        "Africa/Harare",
        "Africa/Johannesburg",
        "Africa/Juba",
        "Africa/Kampala",
        "Africa/Khartoum",
        "Africa/Kigali",
        "Africa/Kinshasa",
        "Africa/Lagos",
        "Africa/Libreville",
        "Africa/Lome",
        "Africa/Luanda",
        "Africa/Lubumbashi",
        "Africa/Lusaka",
        "Africa/Malabo",
        "Africa/Maputo",
        "Africa/Maseru",
        "Africa/Mbabane",
        "Africa/Mogadishu",
        "Africa/Monrovia",
        "Africa/Nairobi",
        "Africa/Ndjamena",
        "Africa/Niamey",
        "Africa/Nouakchott",
        "Africa/Ouagadougou",
        "Africa/Porto-Novo",
        "Africa/Sao_Tome",
        "Africa/Timbuktu",
        "Africa/Tripoli",
        "Africa/Tunis",
        "Africa/Windhoek",
        "America/Adak",
        "America/Anchorage",
        "America/Anguilla",
        "America/Antigua",
        "America/Araguaina",
        "America/Argentina/Buenos_Aires",
        "America/Argentina/Catamarca",
        "America/Argentina/ComodRivadavia",
        "America/Argentina/Cordoba",
        "America/Argentina/Jujuy",
        "America/Argentina/La_Rioja",
        "America/Argentina/Mendoza",
        "America/Argentina/Rio_Gallegos",
        "America/Argentina/Salta",
        "America/Argentina/San_Juan",
        "America/Argentina/San_Luis",
        "America/Argentina/Tucuman",
        "America/Argentina/Ushuaia",
        "America/Aruba",
        "America/Asuncion",
        "America/Atikokan",
        "America/Atka",
        "America/Bahia",
        "America/Bahia_Banderas",
        "America/Barbados",
        "America/Belem",
        "America/Belize",
        "America/Blanc-Sablon",
        "America/Boa_Vista",
        "America/Bogota",
        "America/Boise",
        "America/Buenos_Aires",
        "America/Cambridge_Bay",
        "America/Campo_Grande",
        "America/Cancun",
        "America/Caracas",
        "America/Catamarca",
        "America/Cayenne",
        "America/Cayman",
        "America/Chicago",
        "America/Chihuahua",
        "America/Coral_Harbour",
        "America/Cordoba",
        "America/Costa_Rica",
        "America/Creston",
        "America/Cuiaba",
        "America/Curacao",
        "America/Danmarkshavn",
        "America/Dawson",
        "America/Dawson_Creek",
        "America/Denver",
        "America/Detroit",
        "America/Dominica",
        "America/Edmonton",
        "America/Eirunepe",
        "America/El_Salvador",
        "America/Ensenada",
        "America/Fortaleza",
        "America/Fort_Nelson",
        "America/Fort_Wayne",
        "America/Glace_Bay",
        "America/Godthab",
        "America/Goose_Bay",
        "America/Grand_Turk",
        "America/Grenada",
        "America/Guadeloupe",
        "America/Guatemala",
        "America/Guayaquil",
        "America/Guyana",
        "America/Halifax",
        "America/Havana",
        "America/Hermosillo",
        "America/Indiana/Indianapolis",
        "America/Indiana/Knox",
        "America/Indiana/Marengo",
        "America/Indiana/Petersburg",
        "America/Indianapolis",
        "America/Indiana/Tell_City",
        "America/Indiana/Vevay",
        "America/Indiana/Vincennes",
        "America/Indiana/Winamac",
        "America/Inuvik",
        "America/Iqaluit",
        "America/Jamaica",
        "America/Jujuy",
        "America/Juneau",
        "America/Kentucky/Louisville",
        "America/Kentucky/Monticello",
        "America/Knox_IN",
        "America/Kralendijk",
        "America/La_Paz",
        "America/Lima",
        "America/Los_Angeles",
        "America/Louisville",
        "America/Lower_Princes",
        "America/Maceio",
        "America/Managua",
        "America/Manaus",
        "America/Marigot",
        "America/Martinique",
        "America/Matamoros",
        "America/Mazatlan",
        "America/Mendoza",
        "America/Menominee",
        "America/Merida",
        "America/Metlakatla",
        "America/Mexico_City",
        "America/Miquelon",
        "America/Moncton",
        "America/Monterrey",
        "America/Montevideo",
        "America/Montreal",
        "America/Montserrat",
        "America/Nassau",
        "America/New_York",
        "America/Nipigon",
        "America/Nome",
        "America/Noronha",
        "America/North_Dakota/Beulah",
        "America/North_Dakota/Center",
        "America/North_Dakota/New_Salem",
        "America/Ojinaga",
        "America/Panama",
        "America/Pangnirtung",
        "America/Paramaribo",
        "America/Phoenix",
        "America/Port-au-Prince",
        "America/Porto_Acre",
        "America/Port_of_Spain",
        "America/Porto_Velho",
        "America/Puerto_Rico",
        "America/Rainy_River",
        "America/Rankin_Inlet",
        "America/Recife",
        "America/Regina",
        "America/Resolute",
        "America/Rio_Branco",
        "America/Rosario",
        "America/Santa_Isabel",
        "America/Santarem",
        "America/Santiago",
        "America/Santo_Domingo",
        "America/Sao_Paulo",
        "America/Scoresbysund",
        "America/Shiprock",
        "America/Sitka",
        "America/St_Barthelemy",
        "America/St_Johns",
        "America/St_Kitts",
        "America/St_Lucia",
        "America/St_Thomas",
        "America/St_Vincent",
        "America/Swift_Current",
        "America/Tegucigalpa",
        "America/Thule",
        "America/Thunder_Bay",
        "America/Tijuana",
        "America/Toronto",
        "America/Tortola",
        "America/Vancouver",
        "America/Virgin",
        "America/Whitehorse",
        "America/Winnipeg",
        "America/Yakutat",
        "America/Yellowknife",
        "Antarctica/Casey",
        "Antarctica/Davis",
        "Antarctica/DumontDUrville",
        "Antarctica/Macquarie",
        "Antarctica/Mawson",
        "Antarctica/McMurdo",
        "Antarctica/Palmer",
        "Antarctica/Rothera",
        "Antarctica/South_Pole",
        "Antarctica/Syowa",
        "Antarctica/Troll",
        "Antarctica/Vostok",
        "Arctic/Longyearbyen",
        "Asia/Aden",
        "Asia/Almaty",
        "Asia/Amman",
        "Asia/Anadyr",
        "Asia/Aqtau",
        "Asia/Aqtobe",
        "Asia/Ashgabat",
        "Asia/Ashkhabad",
        "Asia/Baghdad",
        "Asia/Bahrain",
        "Asia/Baku",
        "Asia/Bangkok",
        "Asia/Beijing",
        "Asia/Beirut",
        "Asia/Bishkek",
        "Asia/Brunei",
        "Asia/Calcutta",
        "Asia/Chita",
        "Asia/Choibalsan",
        "Asia/Chongqing",
        "Asia/Chungking",
        "Asia/Colombo",
        "Asia/Dacca",
        "Asia/Damascus",
        "Asia/Dhaka",
        "Asia/Dili",
        "Asia/Dubai",
        "Asia/Dushanbe",
        "Asia/Gaza",
        "Asia/Harbin",
        "Asia/Hebron",
        "Asia/Ho_Chi_Minh",
        "Asia/Hong_Kong",
        "Asia/Hovd",
        "Asia/Irkutsk",
        "Asia/Istanbul",
        "Asia/Jakarta",
        "Asia/Jayapura",
        "Asia/Jerusalem",
        "Asia/Kabul",
        "Asia/Kamchatka",
        "Asia/Karachi",
        "Asia/Kashgar",
        "Asia/Kathmandu",
        "Asia/Katmandu",
        "Asia/Khandyga",
        "Asia/Kolkata",
        "Asia/Krasnoyarsk",
        "Asia/Kuala_Lumpur",
        "Asia/Kuching",
        "Asia/Kuwait",
        "Asia/Macao",
        "Asia/Macau",
        "Asia/Magadan",
        "Asia/Makassar",
        "Asia/Manila",
        "Asia/Muscat",
        "Asia/Nicosia",
        "Asia/Novokuznetsk",
        "Asia/Novosibirsk",
        "Asia/Omsk",
        "Asia/Oral",
        "Asia/Phnom_Penh",
        "Asia/Pontianak",
        "Asia/Pyongyang",
        "Asia/Qatar",
        "Asia/Qyzylorda",
        "Asia/Rangoon",
        "Asia/Riyadh",
        "Asia/Saigon",
        "Asia/Sakhalin",
        "Asia/Samarkand",
        "Asia/Seoul",
        "Asia/Shanghai",
        "Asia/Singapore",
        "Asia/Srednekolymsk",
        "Asia/Taipei",
        "Asia/Tashkent",
        "Asia/Tbilisi",
        "Asia/Tehran",
        "Asia/Tel_Aviv",
        "Asia/Thimbu",
        "Asia/Thimphu",
        "Asia/Tokyo",
        "Asia/Ujung_Pandang",
        "Asia/Ulaanbaatar",
        "Asia/Ulan_Bator",
        "Asia/Urumqi",
        "Asia/Ust-Nera",
        "Asia/Vientiane",
        "Asia/Vladivostok",
        "Asia/Yakutsk",
        "Asia/Yekaterinburg",
        "Asia/Yerevan",
        "Atlantic/Azores",
        "Atlantic/Bermuda",
        "Atlantic/Canary",
        "Atlantic/Cape_Verde",
        "Atlantic/Faeroe",
        "Atlantic/Faroe",
        "Atlantic/Jan_Mayen",
        "Atlantic/Madeira",
        "Atlantic/Reykjavik",
        "Atlantic/South_Georgia",
        "Atlantic/Stanley",
        "Atlantic/St_Helena",
        "Australia/ACT",
        "Australia/Adelaide",
        "Australia/Brisbane",
        "Australia/Broken_Hill",
        "Australia/Canberra",
        "Australia/Currie",
        "Australia/Darwin",
        "Australia/Eucla",
        "Australia/Hobart",
        "Australia/LHI",
        "Australia/Lindeman",
        "Australia/Lord_Howe",
        "Australia/Melbourne",
        "Australia/North",
        "Australia/NSW",
        "Australia/Perth",
        "Australia/Queensland",
        "Australia/South",
        "Australia/Sydney",
        "Australia/Tasmania",
        "Australia/Victoria",
        "Australia/West",
        "Australia/Yancowinna",
        "Brazil/Acre",
        "Brazil/DeNoronha",
        "Brazil/East",
        "Brazil/West",
        "Canada/Atlantic",
        "Canada/Central",
        "Canada/Eastern",
        "Canada/East-Saskatchewan",
        "Canada/Mountain",
        "Canada/Newfoundland",
        "Canada/Pacific",
        "Canada/Saskatchewan",
        "Canada/Yukon",
        "CET",
        "Chile/Continental",
        "Chile/EasterIsland",
        "CST6CDT",
        "Cuba",
        "EET",
        "Egypt",
        "Eire",
        "EST",
        "EST5EDT",
        "Etc/GMT",
        "Etc/GMT0",
        "Etc/GMT-12",
        "Etc/GMT-11",
        "Etc/GMT-10",
        "Etc/GMT-9",
        "Etc/GMT-8",
        "Etc/GMT-7",
        "Etc/GMT-6",
        "Etc/GMT-5",
        "Etc/GMT-4",
        "Etc/GMT-3",
        "Etc/GMT-2",
        "Etc/GMT-1",
        "Etc/GMT-0",
        "Etc/GMT+0",
        "Etc/GMT+1",
        "Etc/GMT+2",
        "Etc/GMT+3",
        "Etc/GMT+4",
        "Etc/GMT+5",
        "Etc/GMT+6",
        "Etc/GMT+7",
        "Etc/GMT+8",
        "Etc/GMT+9",
        "Etc/GMT+10",
        "Etc/GMT+11",
        "Etc/GMT+12",
        "Etc/GMT-13",
        "Etc/GMT-14",
        "Etc/Greenwich",
        "Etc/UCT",
        "Etc/Universal",
        "Etc/UTC",
        "Etc/Zulu",
        "Europe/Amsterdam",
        "Europe/Andorra",
        "Europe/Athens",
        "Europe/Belfast",
        "Europe/Belgrade",
        "Europe/Berlin",
        "Europe/Bratislava",
        "Europe/Brussels",
        "Europe/Bucharest",
        "Europe/Budapest",
        "Europe/Busingen",
        "Europe/Chisinau",
        "Europe/Copenhagen",
        "Europe/Dublin",
        "Europe/Gibraltar",
        "Europe/Guernsey",
        "Europe/Helsinki",
        "Europe/Isle_of_Man",
        "Europe/Istanbul",
        "Europe/Jersey",
        "Europe/Kaliningrad",
        "Europe/Kiev",
        "Europe/Lisbon",
        "Europe/Ljubljana",
        "Europe/London",
        "Europe/Luxembourg",
        "Europe/Madrid",
        "Europe/Malta",
        "Europe/Mariehamn",
        "Europe/Minsk",
        "Europe/Monaco",
        "Europe/Moscow",
        "Europe/Nicosia",
        "Europe/Oslo",
        "Europe/Paris",
        "Europe/Podgorica",
        "Europe/Prague",
        "Europe/Riga",
        "Europe/Rome",
        "Europe/Samara",
        "Europe/San_Marino",
        "Europe/Sarajevo",
        "Europe/Simferopol",
        "Europe/Skopje",
        "Europe/Sofia",
        "Europe/Stockholm",
        "Europe/Tallinn",
        "Europe/Tirane",
        "Europe/Tiraspol",
        "Europe/Uzhgorod",
        "Europe/Vaduz",
        "Europe/Vatican",
        "Europe/Vienna",
        "Europe/Vilnius",
        "Europe/Volgograd",
        "Europe/Warsaw",
        "Europe/Zagreb",
        "Europe/Zaporozhye",
        "Europe/Zurich",
        "Factory",
        "GB",
        "GB-Eire",
        "GMT",
        "GMT0",
        "GMT-0",
        "GMT+0",
        "Greenwich",
        "Hongkong",
        "HST",
        "Iceland",
        "Indian/Antananarivo",
        "Indian/Chagos",
        "Indian/Christmas",
        "Indian/Cocos",
        "Indian/Comoro",
        "Indian/Kerguelen",
        "Indian/Mahe",
        "Indian/Maldives",
        "Indian/Mauritius",
        "Indian/Mayotte",
        "Indian/Reunion",
        "Iran",
        "Israel",
        "Jamaica",
        "Japan",
        "Kwajalein",
        "Libya",
        "MET",
        "Mexico/BajaNorte",
        "Mexico/BajaSur",
        "Mexico/General",
        "MST",
        "MST7MDT",
        "Navajo",
        "NZ",
        "NZ-CHAT",
        "Pacific/Apia",
        "Pacific/Auckland",
        "Pacific/Bougainville",
        "Pacific/Chatham",
        "Pacific/Chuuk",
        "Pacific/Easter",
        "Pacific/Efate",
        "Pacific/Enderbury",
        "Pacific/Fakaofo",
        "Pacific/Fiji",
        "Pacific/Funafuti",
        "Pacific/Galapagos",
        "Pacific/Gambier",
        "Pacific/Guadalcanal",
        "Pacific/Guam",
        "Pacific/Honolulu",
        "Pacific/Johnston",
        "Pacific/Kiritimati",
        "Pacific/Kosrae",
        "Pacific/Kwajalein",
        "Pacific/Majuro",
        "Pacific/Marquesas",
        "Pacific/Midway",
        "Pacific/Nauru",
        "Pacific/Niue",
        "Pacific/Norfolk",
        "Pacific/Noumea",
        "Pacific/Pago_Pago",
        "Pacific/Palau",
        "Pacific/Pitcairn",
        "Pacific/Pohnpei",
        "Pacific/Ponape",
        "Pacific/Port_Moresby",
        "Pacific/Rarotonga",
        "Pacific/Saipan",
        "Pacific/Samoa",
        "Pacific/Tahiti",
        "Pacific/Tarawa",
        "Pacific/Tongatapu",
        "Pacific/Truk",
        "Pacific/Wake",
        "Pacific/Wallis",
        "Pacific/Yap",
        "Poland",
        "Portugal",
        "PRC",
        "PST8PDT",
        "ROC",
        "ROK",
        "Singapore",
        "Turkey",
        "UCT",
        "Universal",
        "US/Alaska",
        "US/Aleutian",
        "US/Arizona",
        "US/Central",
        "US/Eastern",
        "US/East-Indiana",
        "US/Hawaii",
        "US/Indiana-Starke",
        "US/Michigan",
        "US/Mountain",
        "US/Pacific",
        "US/Pacific-New",
        "US/Samoa",
        "UTC",
        "WET",
        "W-SU",
        "Zulu"
      ],
      "Default": "",
      "Description": "Optional. Default: AWS region's timezone",
      "Type": "String"
    },
    "VPC": {
      "Description": "VPC must have internet access (with Internet Gateway or Virtual Private Gateway)",
      "Type": "AWS::EC2::VPC::Id"
    }
  },
  "Resources": {
    "DBAutoscalingGroup": {
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": {
            "Ref": "DBNodeCount"
          },
          "Timeout": "PT2H"
        }
      },
      "Properties": {
        "DesiredCapacity": {
          "Ref": "DBNodeCount"
        },
        "HealthCheckGracePeriod": 3600,
        "LaunchConfigurationName": {
          "Ref": "DBLaunchConfig"
        },
        "MaxSize": {
          "Ref": "DBNodeCount"
        },
        "MinSize": {
          "Ref": "DBNodeCount"
        },
        "PlacementGroup": {
          "Ref": "DBPlacementGroupParam"
        },
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": "true",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "DBS"
                ]
              ]
            }
          },
          {
            "Key": "teradata:stack",
            "PropagateAtLaunch": "true",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "teradata:type",
            "PropagateAtLaunch": "true",
            "Value": "tpa"
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Ref": "PublicSubnet"
          }
        ]
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup"
    },
    "DBCPWDEncrypt": {
      "DependsOn": [
        "DBStackCleanUp"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "DBCPWDEncryptFunction",
            "Arn"
          ]
        },
        "action": "encrypt",
        "pwd": {
          "Ref": "DBSystemPassword"
        },
        "region": {
          "Ref": "AWS::Region"
        }
      },
      "Type": "AWS::CloudFormation::CustomResource"
    },
    "DBCPWDEncryptFunction": {
      "Properties": {
        "Code": {
          "ZipFile": "import boto3\nimport time\nimport logging\nimport cfnresponse\nimport base64\n\n\ndef handler(event, context):\n    ip = event['ResourceProperties']\n    stack = event['StackId'].split('/')[1]\n    tmp_cmk = 'alias/teradata/cft_tmp/%s/' % stack\n    action = ip['action']\n    logging.info('action=%s' % action)\n    client = boto3.client('kms')\n    if event['RequestType'] == 'Delete':\n        logging.info('Deleting function.')\n        try:\n            res = client.list_aliases()\n            keys_to_delete = [key for key in res['Aliases'] if key['AliasName'].startswith(tmp_cmk)]\n            for key in keys_to_delete:\n                client.schedule_key_deletion(KeyId=key['TargetKeyId'], PendingWindowInDays=7)\n            cfnresponse.send(event, context, cfnresponse.SUCCESS, {})\n            return True\n        except Exception as e:\n            logging.error(\n                'Have problem to delete the temporary keys: Error %s' % str(e))\n            logging.exception('error')\n            cfnresponse.send(event, context, cfnresponse.SUCCESS, {})\n            return False\n    if action == 'encrypt':\n        response_dict = dict()\n        try:\n            key = client.create_key(Description='Teradata Database stack temporary key.')\n            key_id = key['KeyMetadata']['KeyId']\n            client.create_alias(AliasName='%s%s' % (tmp_cmk, str(int(time.time()))), TargetKeyId=key_id)\n            logging.info('Temporary key created.')\n            for arg, value in ip.iteritems():\n                if 'pwd' not in arg:\n                    continue\n                res = client.encrypt(KeyId=key_id, Plaintext=value)\n                encrypted_pwd = base64.b64encode(res['CiphertextBlob'])\n                response_dict[arg] = encrypted_pwd\n\n            response_dict['key_id'] = key_id\n            cfnresponse.send(event, context, cfnresponse.SUCCESS, response_dict)\n            return True\n        except Exception as e:\n            logging.error('Failed to encrypt password. Error: %s' % str(e))\n            logging.exception('error')\n            cfnresponse.send(event, context, cfnresponse.FAILED, {})\n            return False\n\n    elif action == 'delete_key':\n        key = ip['key']\n        try:\n            client.schedule_key_deletion(KeyId=key, PendingWindowInDays=7)\n        except:\n            logging.warning('Failed to delete the key. The key may need to be deleted manaully.')\n        cfnresponse.send(event, context, cfnresponse.SUCCESS, {})\n        return True\n\n\n"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "DBMppRole",
            "Arn"
          ]
        },
        "Runtime": "python2.7",
        "Timeout": 300
      },
      "Type": "AWS::Lambda::Function"
    },
    "DBCPWDEncryptKeyDelete": {
      "DependsOn": [
        "DBAutoscalingGroup"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "DBCPWDEncryptFunction",
            "Arn"
          ]
        },
        "action": "delete_key",
        "key": {
          "Fn::GetAtt": [
            "DBCPWDEncrypt",
            "key_id"
          ]
        }
      },
      "Type": "AWS::CloudFormation::CustomResource"
    },
    "DBLaunchConfig": {
      "Properties": {
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sdb",
            "VirtualName": "ephemeral0"
          },
          {
            "DeviceName": "/dev/sdc",
            "VirtualName": "ephemeral1"
          },
          {
            "DeviceName": "/dev/sdd",
            "VirtualName": "ephemeral2"
          },
          {
            "DeviceName": "/dev/sde",
            "VirtualName": "ephemeral3"
          },
          {
            "DeviceName": "/dev/sdf",
            "VirtualName": "ephemeral4"
          },
          {
            "DeviceName": "/dev/sdg",
            "VirtualName": "ephemeral5"
          },
          {
            "DeviceName": "/dev/sdh",
            "VirtualName": "ephemeral6"
          },
          {
            "DeviceName": "/dev/sdi",
            "VirtualName": "ephemeral7"
          },
          {
            "DeviceName": "/dev/sdj",
            "VirtualName": "ephemeral8"
          },
          {
            "DeviceName": "/dev/sdk",
            "VirtualName": "ephemeral9"
          },
          {
            "DeviceName": "/dev/sdl",
            "VirtualName": "ephemeral10"
          },
          {
            "DeviceName": "/dev/sdm",
            "VirtualName": "ephemeral11"
          },
          {
            "DeviceName": "/dev/sdn",
            "VirtualName": "ephemeral12"
          },
          {
            "DeviceName": "/dev/sdo",
            "VirtualName": "ephemeral13"
          },
          {
            "DeviceName": "/dev/sdp",
            "VirtualName": "ephemeral14"
          },
          {
            "DeviceName": "/dev/sdq",
            "VirtualName": "ephemeral15"
          },
          {
            "DeviceName": "/dev/sdr",
            "VirtualName": "ephemeral16"
          },
          {
            "DeviceName": "/dev/sds",
            "VirtualName": "ephemeral17"
          },
          {
            "DeviceName": "/dev/sdt",
            "VirtualName": "ephemeral18"
          },
          {
            "DeviceName": "/dev/sdu",
            "VirtualName": "ephemeral19"
          },
          {
            "DeviceName": "/dev/sdv",
            "VirtualName": "ephemeral20"
          },
          {
            "DeviceName": "/dev/sdw",
            "VirtualName": "ephemeral21"
          },
          {
            "DeviceName": "/dev/sdx",
            "VirtualName": "ephemeral22"
          },
          {
            "DeviceName": "/dev/sdy",
            "VirtualName": "ephemeral23"
          }
        ],
        "IamInstanceProfile": {
          "Ref": "DBMppInstanceProfile"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "DBAMIs",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "InstanceType": {
          "Fn::FindInMap": [
            "DBInstanceStorageTypes",
            {
              "Ref": "DBInstanceStorageType"
            },
            "InstanceType"
          ]
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroups": [
          {
            "Ref": "DBSecurityGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "source /etc/profile\n",
                "check_error_signal()\n",
                "{\n",
                "    RC=$?\n",
                "    if [ ${RC} -ne 0 ]; then\n",
                "    ",
                "instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id; echo)\n",
                "    tdc-log",
                " --file /var/log/cloud-init-output.log",
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                " --group Teradata/DBS/",
                {
                  "Ref": "AWS::StackName"
                },
                " --stream cloud-init-output.log.error",
                "-",
                "${instance_id}",
                "\n",
                "    ",
                "cfn-signal -e ${RC}",
                " --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                " --resource ",
                "DBAutoscalingGroup",
                "\n",
                "        exit ${RC}\n",
                "    fi\n",
                "}\n",
                "tdc-log --init",
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                " --group Teradata/DBS/",
                {
                  "Ref": "AWS::StackName"
                },
                "\n",
                "\n",
                "tdc-launch-validation\n",
                "check_error_signal\n",
                "\n",
                "if [ -n '",
                {
                  "Ref": "Timezone"
                },
                "' ]; then\n    tdc-timezone '",
                {
                  "Ref": "Timezone"
                },
                "'\n",
                "fi\n",
                "/usr/local/bin/tdc-info -updateMOTD short\n",
                "\n",
                "tdc-disable-autoscale\n",
                "check_error_signal\n",
                "\n",
                "\n",
                "tdc-network-configure",
                " --nodes ",
                {
                  "Ref": "DBNodeCount"
                },
                "",
                " --systemname '",
                {
                  "Ref": "DBSystemName"
                },
                "'",
                {
                  "Fn::If": [
                    "DBUseElasticIPs",
                    " --elastic",
                    ""
                  ]
                },
                " --unfoldposition ",
                "0",
                "",
                "\n",
                "check_error_signal\n",
                "\n",
                "PMAID=$(blmd -p)\n",
                "tdc-ntp -s '",
                {
                  "Ref": "NTPServers"
                },
                "'",
                "\n",
                "\n",
                "tdc-init",
                " --system_name '",
                {
                  "Ref": "DBSystemName"
                },
                "'",
                " --dbc_password '",
                {
                  "Fn::GetAtt": [
                    "DBCPWDEncrypt",
                    "pwd"
                  ]
                },
                "'",
                " --pwd_aws_encrypted",
                " --force_config",
                " --kanji_support ",
                {
                  "Ref": "DBKanjiSupport"
                },
                " -g -p -t",
                "",
                "",
                "",
                {
                  "Fn::If": [
                    "DBTemporalEnabled",
                    " --enable_temporal",
                    ""
                  ]
                },
                "\n",
                "check_error_signal\n",
                "\n",
                "\n",
                "/usr/local/bin/tdc-nodestart-init --update-file\n",
                "check_error_signal\n",
                "\n",
                "if [ $PMAID = '33' ]; then\n",
                "    psh /usr/local/bin/tdc-info -updateMOTD short\n",
                "    if [ '",
                {
                  "Ref": "DBRowLevelSecurity"
                },
                "' = 'yes' ]; then\n",
                "        tdc-rlsecurity -n\n",
                "    fi\n",
                "    if [ '",
                {
                  "Ref": "DBSecureZones"
                },
                "' = 'yes' ]; then\n",
                "        tdc-securezones -n -p '",
                {
                  "Fn::GetAtt": [
                    "DBCPWDEncrypt",
                    "pwd"
                  ]
                },
                "'",
                " --pwd_aws_encrypted",
                "\n",
                "    fi\n",
                "    if [ '",
                0,
                "' != '0' ]; then\n",
                "        tdc-feature tim enable --force --tim-size ",
                0,
                "\n",
                "    fi\n",
                "fi\n",
                "tdc-log --file /var/log/cloud-init-output.log",
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                " --group Teradata/DBS/",
                {
                  "Ref": "AWS::StackName"
                },
                " --stream cloud-init-output.log",
                "-",
                "$PMAID",
                "\n",
                "if [ $PMAID = '33' ]; then\n",
                "   tdc-log  --file /etc/motd",
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                " --group Teradata/DBS/",
                {
                  "Ref": "AWS::StackName"
                },
                " --stream tdc-info",
                "\nfi\n",
                "if [ $PMAID = '33' ]; then\n",
                "\n",
                "tdc-configssh",
                " enable",
                " --user ec2-user\n",
                "check_error_signal\n",
                "\n",
                "fi\n",
                "cfn-signal -e 0",
                " --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                " --resource ",
                "DBAutoscalingGroup",
                "\n"
              ]
            ]
          }
        }
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    },
    "DBMppInstanceProfile": {
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "DBMppRole"
          }
        ]
      },
      "Type": "AWS::IAM::InstanceProfile"
    },
    "DBMppRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com",
                  "lambda.amazonaws.com",
                  {
                    "Fn::Join": [
                      ".",
                      [
                        "states",
                        {
                          "Ref": "AWS::Region"
                        },
                        "amazonaws.com"
                      ]
                    ]
                  }
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DescribeSubnets",
                    "ec2:CreateNetworkInterface",
                    "ec2:AttachNetworkInterface",
                    "ec2:DetachNetworkInterface",
                    "ec2:ModifyNetworkInterfaceAttribute",
                    "ec2:AssignPrivateIpAddresses",
                    "ec2:UnassignPrivateIpAddresses",
                    "ec2:AllocateAddress",
                    "ec2:AssociateAddress",
                    "ec2:DisassociateAddress",
                    "ec2:CreateTags",
                    "ec2:DescribeTags",
                    "ec2:CreateVolume",
                    "ec2:ModifyVolume",
                    "ec2:DescribeVolumes",
                    "ec2:DescribeVolumeAttribute",
                    "ec2:DescribeVolumeStatus",
                    "ec2:DescribeInstances",
                    "ec2:DescribeInstanceStatus",
                    "ec2:ModifyInstanceAttribute",
                    "ec2:CreateImage",
                    "ec2:CopyImage",
                    "ec2:DeregisterImage",
                    "ec2:DescribeImages",
                    "ec2:DeleteSnapshot",
                    "ec2:DescribeSnapshots",
                    "ec2:RunInstances",
                    "ec2:TerminateInstances",
                    "ec2:StopInstances",
                    "ec2:StartInstances",
                    "ec2:ReleaseAddress",
                    "ec2:DeleteNetworkInterface",
                    "iam:PassRole",
                    "iam:GetRole",
                    "iam:GetRolePolicy",
                    "states:StartExecution",
                    "states:StopExecution",
                    "lambda:CreateFunction",
                    "lambda:DeleteFunction",
                    "states:CreateStateMachine",
                    "states:DeleteStateMachine",
                    "states:ListStateMachines",
                    "lambda:InvokeFunction",
                    "autoscaling:DescribeAutoScalingGroups",
                    "autoscaling:DetachInstances",
                    "autoscaling:DescribeLaunchConfigurations",
                    "autoscaling:AttachInstances",
                    "autoscaling:SuspendProcesses",
                    "autoscaling:UpdateAutoScalingGroup",
                    "kms:CreateKey",
                    "kms:Decrypt",
                    "kms:Encrypt",
                    "kms:DisableKey",
                    "kms:CreateAlias",
                    "kms:ListAliases",
                    "kms:ScheduleKeyDeletion"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": [
                    "ec2:AttachVolume",
                    "ec2:DetachVolume"
                  ],
                  "Condition": {
                    "StringEquals": {
                      "ec2:ResourceTag/teradata:stack": {
                        "Ref": "AWS::StackName"
                      }
                    }
                  },
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": [
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams",
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:logs:*:*:*"
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "tdmpp"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "DBSecurityGroup": {
      "Properties": {
        "GroupDescription": "Security group for Teradata DBS",
        "SecurityGroupIngress": [
          {
            "CidrIp": {
              "Ref": "SecurityGroupAccess"
            },
            "FromPort": "22",
            "IpProtocol": "tcp",
            "ToPort": "22"
          },
          {
            "CidrIp": {
              "Ref": "SecurityGroupAccess"
            },
            "FromPort": "1025",
            "IpProtocol": "tcp",
            "ToPort": "1025"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "DBSecurityGroupSelfRule": {
      "Properties": {
        "GroupId": {
          "Fn::GetAtt": [
            "DBSecurityGroup",
            "GroupId"
          ]
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "DBSecurityGroup",
            "GroupId"
          ]
        }
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "DBStackCleanUp": {
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "DBStackCleanupFunction",
            "Arn"
          ]
        },
        "region": {
          "Ref": "AWS::Region"
        }
      },
      "Type": "AWS::CloudFormation::CustomResource"
    },
    "DBStackCleanupFunction": {
      "Properties": {
        "Code": {
          "ZipFile": "import boto3\nimport logging\nimport cfnresponse\nlogger = logging.getLogger()\nlogger.setLevel(logging.DEBUG)\n\n\ndef handler(event, context):\n    ip = event['ResourceProperties']\n    stack_name = event['StackId'].split('/')[1]\n    region = ip['region']\n    if event['RequestType'] == 'Delete':\n        client = boto3.client(\"ec2\", region_name=region)\n        logger.info('Cleaning up images...')\n        try:\n            res = client.describe_images(Filters=[{'Name': 'tag:teradata:stack', 'Values': [stack_name]}])\n            ami_snp_ids = [(image['ImageId'],\n                            [blk['Ebs']['SnapshotId'] for blk in image['BlockDeviceMappings']\n                             if blk['DeviceName'] == image['RootDeviceName']][0])\n                           for image in res['Images']]\n\n            logging.info(\"Ami/snapshots to delete: %s.\" % ami_snp_ids)\n            for id_ in ami_snp_ids:\n                logging.info(\"Deleting ami: %s ...\" % id_[0])\n                client.deregister_image(ImageId=id_[0])\n                logging.info(\"ami: %s has been deleted.\" % id_[0])\n                logging.info(\"Deleting snapshot: %s ...\" % id_[1])\n                client.delete_snapshot(SnapshotId=id_[1])\n                logging.info(\"Snapshot: %s has been deleted.\" % id_[1])\n        except:\n            logger.error(\n                'Have problem to delete ami/snapshot.')\n            logging.exception('error')\n        cfnresponse.send(event, context, cfnresponse.SUCCESS, {})\n        return\n\n    cfnresponse.send(event, context, cfnresponse.SUCCESS, {})\n    return\n"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "DBMppRole",
            "Arn"
          ]
        },
        "Runtime": "python2.7",
        "Timeout": 300
      },
      "Type": "AWS::Lambda::Function"
    }
  }
}
